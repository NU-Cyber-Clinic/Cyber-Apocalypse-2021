#include <iostream>
#include <stdio.h>
#include <termios.h>
#include <fcntl.h>

unsigned int next_in_seq = 0x2E9D3;
unsigned int key_generator()
{
  next_in_seq = 50550653 * next_in_seq + 5210;
  return next_in_seq % 0xFFu;
}

int main(int argc, const char **argv, const char **envp)
{
  char c; // r4
  int return_val; // r3
  /*_DWORD*/ char buf[113]; // [sp+Ch] [bp-250h] BYREF
  char flag[52]; // [sp+1D0h] [bp-8Ch] BYREF
  struct termios termios_params; // [sp+204h] [bp-58h] BYREF
  ssize_t write_result; // [sp+240h] [bp-1Ch]
  int fd; // [sp+244h] [bp-18h]
  int counter; // [sp+248h] [bp-14h]
  int i; // [sp+24Ch] [bp-10h]

  qmemcpy(flag, "CTHB{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA}", 50);
  for ( i = 0; i <= 49; ++i ) //go through 50 values
  {
    c = flag[i]; 
    //*((_BYTE *)&buf[100] + i) = key_generator() ^ c;
    buf[i] = key_generator() ^ c; //i hope this is right
  }
  if ( argc == 1 )
    return -1;
  printf("[!] sending data to %s\n", argv[1]);
  fd = open(argv[1], 2306);
  if ( fd == -1 )
  {
    perror(argv[1]);
    return_val = -1;
  }
  else if ( tcgetattr(fd, &termios_params) >= 0 )
  {
    termios_params.c_iflag = 0; //Turn off input processing
    termios_params.c_oflag = 0; //Turn off output processing
    termios_params.c_lflag = 0; //No line processing
    termios_params.c_cc[6] = 0;
    termios_params.c_cc[5] = 0;
    termios_params.c_cflag = 4417;
    tcsetattr(fd, 0, &termios_params);
    counter = 0;
    for ( i = 0; i <= 49; ++i )
    {
    //   buf[counter] = ((*((_BYTE *)&buf[100] + i) >> 4) & 0xF) + 1;
    //   buf[counter + 1] = (*((_BYTE *)&buf[100] + i) & 0xF) + 1;
      buf[counter] = ((buf[i] >> 4) & 0xF) + 1; //every even position is bitshifted to the right by 4, essentially eating away from
      buf[counter + 1] = (buf[i] & 0xF) + 1; //every uneven position is just added with 1, the value is kept the same
      counter += 2;
    }
    for ( i = 0; i <= 0; ++i )
    {
      write_result = write(fd, buf, 0x190u);
      if ( write_result < 0 )
      {
        perror("[x] write error");
        return -1;
      }
    }
    close(fd);
    return_val = 0;
  }
  else
  {
    perror("[x] configuration error");
    return_val = -1;
  }
  return return_val;
}